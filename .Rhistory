theme(axis.text.x = element_text(angle = 45, hjust = 1)) # rotate the x axis labels 45 degrees
> mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
> plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy)) #import dataset into ggplot2
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy)) #import dataset into ggplot2
View(mpg_summary)
plt + geom_line()
plt + geom+line() + scale_x_discrete(limits=c(4, 6, 8))
plt + geom+line() + scale_x_discrete(limits=c(4, 6, 8)), + scale_y_continuous(breaks = c(15:30)) # add line plot with labels
plt + geom+line() + scale_x_discrete(limits=c(4, 6, 8)) + scale_y_continuous(breaks = c(15:30)) # add line plot with labels
plt + geom_line() + scale_x_discrete(limits=c(4, 6, 8)) + scale_y_continuous(breaks = c(15:30)) # add line plot with labels
plt <- ggplt(mpg, aes(x=disp, y=cty)) # import dataset into ggplot2
plt <- ggplot(mpg, aes(x=disp, y=cty)) # import dataset into ggplot2
plt + geom_point() + xlab("Engine Size (L)") + ylab("City Fuel-Efficiency (MPG)") # add scatterplot with labels
plt + geom_point() + xlab("Engine Size (L)") + ylab("City Fuel-Efficiency (MPG)") # add scatterplot with labels
plt <- ggplot(mpg, aes(x=displ, y=cty)) # import dataset into ggplot2
plt + geom_point() + xlab("Engine Size (L)") + ylab("City Fuel-Efficiency (MPG)") # add scatterplot with labels
> plt <- ggplot(mpg,aes(x=displ,y=cty,color=class)) #import dataset into ggplot2
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class)) #import dataset into ggplot2
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class") #add scatter plot with labels
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class,shape=drv)) #import dataset into ggplot2
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class",shape="Type of Drive") #add scatter plot with multiple aesthetics
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class", size = "MPG") #add scatter plot with labels
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class") #add scatter plot with labels
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class,size=mpg)) #import dataset into ggplot2
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class", size = "MPG") #add scatter plot with labels
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class,size="City Fuel-Efficiency (MPG)")) #import dataset into ggplot2
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class", size = "MPG") #add scatter plot with labels
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class)) #import dataset into ggplot2
plt + geom_point(aes(size = cty)) + xlab("Engine Size (L)") + ylab("City Fuel-Efficiency (MPG)") # add scatterplot with labels
plt <- ggplot(mpg, aes(y=hwy)) # import dataset into ggplot2
plt + geom_boxplot() # add boxplot
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degrees
View(mpg_summary)
View(demo_table3)
View(demo_table3)
View(filter_table3)
View(demo_table3)
View(longtable)
View(mpg_summary)
View(plt)
View(wide_table)
View(mpg)
plt + geom_boxplot(fill = "blue", color = "red") + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degrees
plt + geom_boxplot(linetype = "dotted", fill = "blue", color = "red") + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degrees
plt + geom_boxplot(linetype = "dashed", fill = "blue", color = "red") + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degrees
plt + geom_boxplot(linetype = "dashed", ymax = ..uppper..), outlier.shape == 1), fill = "blue", color = "red") + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degrees
mpg_summary <- mpg %>% group_by(class,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
library(jsonlite)
library(tidyverse)
mpg_summary <- mpg %>% group_by(class,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=class,y=factor(year),fill=Mean_Hwy))
plt + geom_tile() + labs(x="Vehicle Class",y="Vehicle Year",fill="Mean Highway (MPG)") #create heatmap with labels
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels > theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels > theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
>plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels > theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels > theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + #add boxplot
theme(axis.text.x=element_text(angle=45,hjust=1)) + #rotate x-axis labels 45 degrees
geom_point() #overlay scatter plot on top
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine)) #import dataset into ggplot2
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") #add scatter plot
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels > theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels > theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
mpg_summary <- mpg %>% group_by(class,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=class,y=factor(year),fill=Mean_Hwy))
plt + geom_tile() + labs(x="Vehicle Class",y="Vehicle Year",fill="Mean Highway (MPG)") #create heatmap with labels
mpg_summary <- mpg %>% group_by(class,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=class,y=factor(year),fill=Mean_Hwy))
plt + geom_tile() + labs(x="Vehicle Class",y="Vehicle Year",fill="Mean Highway (MPG)") #create heatmap with labels
mpg_summary <- mpg %>% group_by(class,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=class,y=factor(year),fill=Mean_Hwy))
plt + geom_tile() + labs(x="Vehicle Class",y="Vehicle Year",fill="Mean Highway (MPG)") #create heatmap with labels
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels > theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
geom_point() #overlay scatter plot on top
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine)) #import dataset into ggplot2
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") #add scatter plot
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + #add boxplot
theme(axis.text.x=element_text(angle=45,hjust=1)) + #rotate x-axis labels 45 degrees
geom_point() #overlay scatter plot on top
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ),SD_Engine=sd(displ), .groups = 'keep')
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine)) #import dataset into ggplot2
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") + #add scatter plot with labels
geom_errorbar(aes(ymin=Mean_Engine-SD_Engine,ymax=Mean_Engine+SD_Engine)) #overlay with error bars
mpg_long <- mpg %>% gather(key="MPG_Type",value="Rating",c(cty,hwy)) #convert to long format
head(mpg_long)
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot with labels rotated 45 degrees
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) + #create multiple boxplots, one for each MPG type
theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturer") #rotate x-axis labels
ggplot(mtcars,aes(x=wt)) + geom_density() #visualize distribution using density plot
shapiro.test(mtcars$wt)
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F) #import used car dataset
plt <- ggplot(population_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F) #import used car dataset
plt <- ggplot(population_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
plt <- ggplot(sample_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
?t.test()
>t.test(log10(sample_table$Miles_Driven),mu=mean(log10(population_table$Miles_Driven))) #compare sample versus population means
t.test(log10(sample_table$Miles_Driven),mu=mean(log10(population_table$Miles_Driven))) #compare sample versus population means
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven)) #compare means of two samples
?t.text()
?t.test()
mpg_data <- read.csv('mpg_modified.csv') #import dataset
mpg_1999 <- mpg_data %>% filter(year==1999) #select only data points where the year is 1999
mpg_2008 <- mpg_data %>% filter(year==2008) #select only data points where the year is 2008
mpg_data <- read.csv('mpg_modified.csv') #import dataset
mpg_1999 <- mpg_data %>% filter(year==1999) #select only data points where the year is 1999
mpg_2008 <- mpg_data %>% filter(year==2008) #select only data points where the year is 2008
t.test(mpg_1999$hwy,mpg_2008$hwy,paired = T) #compare the mean difference between two samples
?aov()
mtcars_filt <- mtcars[,c("hp","cyl")] #filter columns from mtcars dataset
mtcars_filt$cyl <- factor(mtcars_filt$cyl) #convert numeric column to factor
aov(hp ~ cyl,data=mtcars_filt) #compare means across multiple levels
summary(aov(hp ~ cyl,data=mtcars_filt))
head(mtcars)
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() #create scatter plot
library(jsonlite)
demo_table2 <- fromJSON(txt='demo.json')
library(tidyverse)
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() #create scatter plot
cor(mtcars$hp,mtcars$qsec) #calculate correlation coefficient
> used_cars <- read.csv('used_car_data.csv',stringsAsFactors = F) #read in dataset
> head(used_cars)
used_cars <- read.csv('used_car_data.csv',stringsAsFactors = F) #read in dataset
head(used_cars)
used_cars <- read.csv('used_car_data.csv',stringsAsFactors = F) #read in dataset
head(used_cars)
plt <- ggplot(used_cars,aes(x=Miles_Driven,y=Selling_Price)) #import dataset into ggplot2
plt + geom_point() #create a scatter plot
cor(used_cars$Miles_Driven,used_cars$Selling_Price) #calculate correlation coefficient
used_matrix <- as.matrix(used_cars[,c("Selling_Price","Present_Price","Miles_Driven")]) #convert data frame into numeric matrix
cor(used_matrix)
?lm()
lm(qsec ~ hp,mtcars) #create linear model
> summary(lm(qsec~hp,mtcars)) #summarize linear model
summary(lm(qsec~hp,mtcars)) #summarize linear model
model <- lm(qsec ~ hp,mtcars) #create linear model
yvals <- model$coefficients['hp']*mtcars$hp +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars) #generate multiple linear regression model
lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars) #generate multiple linear regression model
summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)) #generate summary statistics
table(mpg$class,mpg$year) #generate contingency table
tbl <- table(mpg$class,mpg$year) #generate contingency table
chisq.test(tbl) #compare categorical distributions
?gather()
long_table <- gather(demo_table3,key="Metric",value="Score",buying_price:popularity)
View(long_table)
View(long_table)
roll_call <- function(class){
print(Sys.Date())
for (student in class){
print(student)
}
}
roll_call(students)
View(roll_call)
View(roll_call)
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
roll_call <- function(class){
print(Sys.Date())
for (student in class){
print(student)
}
}
roll_call(students)
locker_combinations <- function(class){
for (student in class){
combination <- sample(33,3)
print(student)
print(combination)
}
}
locker_combinations(students)
locker_combinations <- function(class){
for (student in class){
combination <- sample(33,3)
print(student)
print(combination)
}
}
locker_combinations(students)
for (student in students){
second_letter <- substr(student,2,2)
if (second_letter == 'e'){
print(student)
combination <- sample(33:66,3)
print(combination)
}
}
library(dplyr)
MechCar_mpg -> read.csv(../MechaCar_Statistical_Analysis/MechaCar_mpg.csv)
library(dplyr)
MechCar_mpg <- read.csv(../MechaCar_Statistical_Analysis/MechaCar_mpg.csv)
library(dplyr)
MechCar_mpg <- read.csv("../MechaCar_Statistical_Analysis/MechaCar_mpg.csv")
View(MechCar_mpg)
View(MechCar_mpg)
library(dplyr)
MechCar_mpg <- read.csv("../MechaCar_Statistical_Analysis/MechaCar_mpg.csv")
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance, data= MechCar_mpg) # Generate multiple linear regressions for mpg
library(dplyr)
MechCar_mpg <- read.csv("../MechaCar_Statistical_Analysis/MechaCar_mpg.csv")
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance, data= MechCar_mpg)) # Generate multiple linear regressions for mpg
library(dplyr)
MechCar_mpg <- read.csv("../MechaCar_Statistical_Analysis/MechaCar_mpg.csv")
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data= MechCar_mpg)) # Generate multiple linear regressions for mpg
library(dplyr)
library(car)
MechCar_mpg <- read.csv("../MechaCar_Statistical_Analysis/MechaCar_mpg.csv")
model <- (lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data= MechCar_mpg)) # Generate multiple linear regressions for mpg
summary(model)
avPlots(model)
library(car)
install.packages("car")
library(dplyr)
library(car)
MechCar_mpg <- read.csv("../MechaCar_Statistical_Analysis/MechaCar_mpg.csv")
model <- (lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data= MechCar_mpg)) # Generate multiple linear regressions for mpg
summary(model)
avPlots(model)
Suspension_coil <- read.csv("../MechaCar_Statistical_Analysis/Suspension_Coil.csv")
total summary <- summarise(Suspention_coil)
Suspension_coil <- read.csv("../MechaCar_Statistical_Analysis/Suspension_Coil.csv")
total_summary <- summarise(Suspention_coil)
Suspension_coil <- read.csv("../MechaCar_Statistical_Analysis/Suspension_Coil.csv")
total_summary <- summarise(Suspension_coil)
View(total_summary)
Suspension_coil <- read.csv("../MechaCar_Statistical_Analysis/Suspension_Coil.csv")
total_summary <- summary(Suspension_coil)
Suspension_coil <- read.csv("../MechaCar_Statistical_Analysis/Suspension_Coil.csv")
total_summary <- summarize(Suspension_coil)
View(total_summary)
View(Suspension_coil)
avPlots(model)
Suspension_coil <- read.csv("../MechaCar_Statistical_Analysis/Suspension_Coil.csv")
total_summary <- summarize(Suspension_coil(PSI))
Suspension_coil <- read.csv("../MechaCar_Statistical_Analysis/Suspension_Coil.csv")
total_summary <- summarize(Suspension_coil, PSI)
View(total_summary)
?summarize()
Suspension_coil <- read.csv("../MechaCar_Statistical_Analysis/Suspension_Coil.csv")
total_summary <- summarize(Suspension_coil, Mean=mean(PSI),Median=median(PSI),Variance=var(PSI), SD=sd(PSI))
View(total_summary)
lot_summary <- Suspension_coil %>% group_by(Manufacturing_Lot) %>% summarize(Suspension_coil, Mean=mean(PSI),Median=median(PSI),Variance=var(PSI), SD=sd(PSI))
View(lot_summary)
lot_summary <- Suspension_coil %>% group_by(Manufacturing_Lot) %>% summarize(Suspension_coil, Mean=mean(PSI),Median=median(PSI),Variance=var(PSI), SD=sd(PSI), .groups ='keep')
View(lot_summary)
lot_summary <- Suspension_coil %>% group_by(Manufacturing_Lot) %>% summarize(Suspension_coil, Mean=mean(PSI),Median=median(PSI),Variance=var(PSI), SD=sd(PSI), .groups = 'keep')
View(lot_summary)
library(dplyr)
library(car)
MechCar_mpg <- read.csv("../MechaCar_Statistical_Analysis/MechaCar_mpg.csv")
model <- (lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data= MechCar_mpg)) # Generate multiple linear regressions for mpg
summary(model)
avPlots(model)
Suspension_coil <- read.csv("../MechaCar_Statistical_Analysis/Suspension_Coil.csv")
total_summary <- summarize(Suspension_coil, Mean=mean(PSI),Median=median(PSI),Variance=var(PSI), SD=sd(PSI))
lot_summary <- Suspension_coil %>% group_by(Manufacturing_Lot) %>% summarize(Suspension_coil, Mean=mean(PSI),Median=median(PSI),Variance=var(PSI), SD=sd(PSI), .groups = 'keep')
View(lot_summary)
lot_summary <- Suspension_coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI), SD=sd(PSI), .groups = 'keep')
View(lot_summary)
View(lot_summary)
t.test(Suspension_coil$Manufacturing_Lot), mu=mean(Suspension_coil$PSI)
t.test(Suspension_coil$Manufacturing_Lot),mu=mean(Suspension_coil$PSI)
t.test(Suspension_coil$Manufacturing_Lot , mu=mean(Suspension_coil$PSI)
t.test(Suspension_coil$Manufacturing_Lot , Suspension_coil$PSI)
t.test(Suspension_coil$Manufacturing_Lot , mean(Suspension_coil$PSI))
t.test(Suspension_coil$Manufacturing_Lot , mu=mean(Suspension_coil$PSI))
coil_lot1 = subset(Suspension_coil, Manufacturing_Lot == "Lot1")
mean(coil_lot1[["PSI"]])
coil_lot2 = subset(Suspension_coil, Manufacturing_Lot == "Lot2")
mean(coil_lot2[["PSI"]])
coil_lot3 = subset(Suspension_coil, Manufacturing_Lot == "Lot3")
mean(coil_lot3[["PSI"]])
suspension_ttest_Lot1Lot2 <- t.test(coil_lot1[["PSI"]], coil_lot2[["PSI"]])
View(suspension_ttest_Lot1Lot2)
coil_lot1 = subset(Suspension_coil, Manufacturing_Lot == "Lot1")
mean(coil_lot1[["PSI"]])
coil_lot2 = subset(Suspension_coil, Manufacturing_Lot == "Lot2")
mean(coil_lot2[["PSI"]])
coil_lot3 = subset(Suspension_coil, Manufacturing_Lot == "Lot3")
mean(coil_lot3[["PSI"]])
t.test(coil_lot1[["PSI"]], coil_lot2[["PSI"]])
t.test(coil_lot1[["PSI"]], coil_lot3[["PSI"]])
t.test(coil_lot2[["PSI"]], coil_lot3[["PSI"]])
coil_ttest_lot1lot2 <- t.test(coil_lot1[["PSI"]], coil_lot2[["PSI"]])
coil_ttest_lot1lot3 <- t.test(coil_lot1[["PSI"]], coil_lot3[["PSI"]])
coil_ttest_lot2lot3 <- t.test(coil_lot2[["PSI"]], coil_lot3[["PSI"]])
View(coil_ttest_lot1lot2)
View(coil_ttest_lot1lot3)
View(coil_ttest_lot2lot3)
View(coil_ttest_lot1lot2)
View(coil_ttest_lot2lot3)
plt <- ggplot(Suspension_coil, aes(x=PSI,y=Manufacturing_Lot))
plt + geom_boxplot()
library(dplyr)
library(car)
library(ggplot2)
plt <- ggplot(Suspension_coil, aes(x=PSI,y=Manufacturing_Lot))
plt + geom_boxplot()
plt <- ggplot(Suspension_coil, aes(y=PSI,x=Manufacturing_Lot))
plt + geom_boxplot()
library(dplyr)
library(car)
library(ggplot2)
MechCar_mpg <- read.csv("../MechaCar_Statistical_Analysis/MechaCar_mpg.csv")
model <- (lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data= MechCar_mpg)) # Generate multiple linear regressions for mpg
summary(model)
avPlots(model)
Suspension_coil <- read.csv("../MechaCar_Statistical_Analysis/Suspension_Coil.csv")
total_summary <- summarize(Suspension_coil, Mean=mean(PSI),Median=median(PSI),Variance=var(PSI), SD=sd(PSI)) # Create a dataframe containing the summary statistics of the suspension coils
lot_summary <- Suspension_coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI), SD=sd(PSI), .groups = 'keep') ## Create a dataframe containing the summary statistics of the suspension coils by lot
plt <- ggplot(Suspension_coil, aes(y=PSI,x=Manufacturing_Lot))
plt + geom_boxplot()
coil_lot1 = subset(Suspension_coil, Manufacturing_Lot == "Lot1")
mean(coil_lot1[["PSI"]])
coil_lot2 = subset(Suspension_coil, Manufacturing_Lot == "Lot2")
mean(coil_lot2[["PSI"]])
coil_lot3 = subset(Suspension_coil, Manufacturing_Lot == "Lot3")
mean(coil_lot3[["PSI"]])
coil_ttest_lot1lot2 <- t.test(coil_lot1[["PSI"]], coil_lot2[["PSI"]])
coil_ttest_lot1lot3 <- t.test(coil_lot1[["PSI"]], coil_lot3[["PSI"]])
coil_ttest_lot2lot3 <- t.test(coil_lot2[["PSI"]], coil_lot3[["PSI"]])
aov(PSI ~ Manufacture_Lot, data=Suspension_coil)
aov(PSI ~ Manufacturing_Lot, data=Suspension_coil)
summary(aov(PSI ~ Manufacturing_Lot, data=Suspension_coil))
coil_anova <- (aov(PSI ~ Manufacturing_Lot, data=Suspension_coil))# Conduct and ANOVA analysis of the PSI between lots to determine if there is a statistically significant difference between them
anova_summary(coil_anova)
View(coil_anova)
View(coil_anova)
install.packages("rstatix")
library(dplyr)
library(car)
library(ggplot2)
library(rstatix)
coil_anova <- (aov(PSI ~ Manufacturing_Lot, data=Suspension_coil))# Conduct and ANOVA analysis of the PSI between lots to determine if there is a statistically significant difference between them
anova_summary(coil_anova)
summary(aov(PSI ~ Manufacturing_Lot, data=Suspension_coil))# Conduct and ANOVA analysis of the PSI between lots to determine if there is a statistically significant difference between them
library(dplyr)
library(car)
library(ggplot2)
MechCar_mpg <- read.csv("../MechaCar_Statistical_Analysis/MechaCar_mpg.csv")
model <- (lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data= MechCar_mpg)) # Generate multiple linear regressions for mpg
summary(model)
avPlots(model)
model$coefficients
Suspension_coil <- read.csv("../MechaCar_Statistical_Analysis/Suspension_Coil.csv")
total_summary <- summarize(Suspension_coil, Mean=mean(PSI),Median=median(PSI),Variance=var(PSI), SD=sd(PSI)) # Create a dataframe containing the summary statistics of the suspension coils
lot_summary <- Suspension_coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI), SD=sd(PSI), .groups = 'keep') ## Create a dataframe containing the summary statistics of the suspension coils by lot
View(total_summary)
View(lot_summary)
plt <- ggplot(Suspension_coil, aes(y=PSI,x=Manufacturing_Lot))
plt + geom_boxplot()
coil_lot1 = subset(Suspension_coil, Manufacturing_Lot == "Lot1")
mean(coil_lot1[["PSI"]])
coil_lot2 = subset(Suspension_coil, Manufacturing_Lot == "Lot2")
mean(coil_lot2[["PSI"]])
coil_lot3 = subset(Suspension_coil, Manufacturing_Lot == "Lot3")
mean(coil_lot3[["PSI"]])
coil_ttest_lot1lot2 <- t.test(coil_lot1[["PSI"]], coil_lot2[["PSI"]])
coil_ttest_lot1lot3 <- t.test(coil_lot1[["PSI"]], coil_lot3[["PSI"]])
coil_ttest_lot2lot3 <- t.test(coil_lot2[["PSI"]], coil_lot3[["PSI"]])
summary(aov(PSI ~ Manufacturing_Lot, data=Suspension_coil))# Conduct an ANOVA analysis of the PSI between lots to determine if there is a statistically significant difference between them
t.test(coil_lot1[["PSI"]], coil_lot2[["PSI"]])
t.test(coil_lot1[["PSI"]], coil_lot3[["PSI"]])
t.test(coil_lot2[["PSI"]], coil_lot3[["PSI"]])
coil_ttest_lot1lot2 <- t.test(coil_lot1[["PSI"]], Suspension_coil[["PSI"]])
coil_ttest_lot1lot3 <- t.test(coil_lot1[["PSI"]], Suspension_coil[["PSI"]])
coil_ttest_lot2lot3 <- t.test(coil_lot2[["PSI"]], Suspension_coil[["PSI"]])
t.test(coil_lot1[["PSI"]], Suspension_coil[["PSI"]])
t.test(coil_lot1[["PSI"]], Suspension_coil[["PSI"]])
t.test(coil_lot2[["PSI"]], Suspension_coil[["PSI"]])
coil_ttest_lot1lot2 <- t.test(coil_lot1[["PSI"]], Suspension_coil[["PSI"]])
coil_ttest_lot1lot3 <- t.test(coil_lot2[["PSI"]], Suspension_coil[["PSI"]])
coil_ttest_lot2lot3 <- t.test(coil_lot3[["PSI"]], Suspension_coil[["PSI"]])
t.test(coil_lot1[["PSI"]], Suspension_coil[["PSI"]])
t.test(coil_lot2[["PSI"]], Suspension_coil[["PSI"]])
t.test(coil_lot3[["PSI"]], Suspension_coil[["PSI"]])
coil_ttest_lot1lot2 <- t.test(coil_lot1[["PSI"]], coil_lot2[["PSI"]], paired = T)
coil_ttest_lot1lot3 <- t.test(coil_lot2[["PSI"]], coil_lot3[["PSI"]], paired = T)
coil_ttest_lot2lot3 <- t.test(coil_lot1[["PSI"]], Coil_lot3[["PSI"]], paired = T)
t.test(coil_lot1[["PSI"]], Suspension_coil[["PSI"]], paired = T)
t.test(coil_lot2[["PSI"]], Suspension_coil[["PSI"]], paired = T)
t.test(coil_lot3[["PSI"]], Suspension_coil[["PSI"]], paired = T)
coil_ttest_lot1lot2 <- t.test(coil_lot1[["PSI"]], coil_lot2[["PSI"]], paired = T)
coil_ttest_lot1lot3 <- t.test(coil_lot2[["PSI"]], coil_lot3[["PSI"]], paired = T)
coil_ttest_lot2lot3 <- t.test(coil_lot1[["PSI"]], coil_lot3[["PSI"]], paired = T)
t.test(coil_lot1[["PSI"]], coil_lot2[["PSI"]], paired = T)
t.test(coil_lot2[["PSI"]], coil_lot3[["PSI"]], paired = T)
t.test(coil_lot1[["PSI"]], coil_lot3[["PSI"]], paired = T)
ttest_coildata_pop <- ttest(Suspension_coil[[PSI]], mu = 1500)
ttest(Suspension_coil[[PSI]], mu = 1500)
ttest_coildata_pop <- t.test(Suspension_coil[[PSI]], mu = 1500)
t.test(Suspension_coil[[PSI]], mu = 1500)
ttest_coildata_pop <- t.test(Suspension_coil[["PSI"]], mu = 1500)
t.test(Suspension_coil[["PSI"]], mu = 1500)
t.test(coil_lot1[["PSI"]], mu = 1500)
t.test(coil_lot2[["PSI"]], mu = 1500)
t.test(coil_lot3[["PSI"]], mu = 1500)
ttest_coildata_pop <- t.test(Suspension_coil$PSI, mu = 1500)
t.test(Suspension_coil$PSI, mu = 1500)
ttest_coildata_pop <- t.test(mean(Suspension_coil$PSI), mu = 1500)
t.test(mean(Suspension_coil$PSI), mu = 1500)
t.test((subset(Suspension_coil, Manufacturing_Lot == "Lot1"), mu = 1500)
t.test(coil_lot1$PSI]], mu = 1500)
t.test(coil_lot1$PSI, mu = 1500)
library(dplyr)
library(car)
library(ggplot2)
MechCar_mpg <- read.csv("../MechaCar_Statistical_Analysis/MechaCar_mpg.csv")
model <- (lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data= MechCar_mpg)) # Generate multiple linear regressions for mpg
summary(model)
avPlots(model)
Suspension_coil <- read.csv("../MechaCar_Statistical_Analysis/Suspension_Coil.csv")
total_summary <- summarize(Suspension_coil, Mean=mean(PSI),Median=median(PSI),Variance=var(PSI), SD=sd(PSI)) # Create a dataframe containing the summary statistics of the suspension coils
lot_summary <- Suspension_coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI), SD=sd(PSI), .groups = 'keep') ## Create a dataframe containing the summary statistics of the suspension coils by lot
plt <- ggplot(Suspension_coil, aes(y=PSI,x=Manufacturing_Lot))
plt + geom_boxplot()
ttest_coildata_pop <- t.test(Suspension_coil$PSI, mu = 1500) # TTest comparing the d
t.test(Suspension_coil$PSI, mu = 1500)
coil_lot1 = subset(Suspension_coil, Manufacturing_Lot == "Lot1")
coil_lot2 = subset(Suspension_coil, Manufacturing_Lot == "Lot2")
coil_lot3 = subset(Suspension_coil, Manufacturing_Lot == "Lot3")
t.test(coil_lot1$PSI, mu = 1500)
t.test(coil_lot2$PSI, mu = 1500)
t.test(coil_lot3$PSI, mu = 1500)
t.test(coil_lot1$PSI, coil_lot2$PSI, paired = T)
t.test(coil_lot2$PSI, coil_lot3$PSI, paired = T)
t.test(coil_lot1$PSI, coil_lot3$PSI, paired = T)
summary(aov(PSI ~ Manufacturing_Lot, data=Suspension_coil))# Conduct an ANOVA analysis of the PSI between lots to determine if there is a statistically significant difference between them
# Generate some fake data to test with
set.seed(42)
population1 = rnorm(1000)
population2 = rnorm(1000)
t.test(population1, population2)
# Generate some fake data to test with
set.seed(42)
population1 = rnorm(1000)
population2 = sample(population1, 200)
t.test(population2, mu=mean(population1))
# Generate data with a bigger difference in means
population3 = rnorm(1000, -2)
t.test(population2, mu=mean(population3))
sardines <- read.csv(file="03-Stu_Sardines/Resources/sardines.csv")
sardines <- read.csv(file="../Resources/sardines.csv")
sardines <- read.csv(file="../Resources/sardines.csv")
sardines <- read.csv(file="sardines.csv")
sardines <- read.csv("sardines.csv")
sardines <- read.csv("sardines.csv")
?read.csv
sardines <- read.csv(sardines.csv)
sardines <- read.csv(file="../Resources/sardines.csv)
sardines <- read.csv(file=../Resources/sardines.csv)
sardines <- read.csv("file=../Resources/sardines.csv")
sardines <- read.csv("file=../Resources/sardines.csv")
sardines <- read.csv(file="../Resources/sardines.csv")
sardines <- read.csv(file="..//Resources/sardines.csv")
sardines <- read.csv(file="sardines.csv")
sardines <- read.csv(file="sardines.csv")
sardines <- read.csv(sardines.csv)
sardines <- read.csv(sardines.csv)
sardines <- read.csv("sardines.csv")
sardines <- read.csv(sardines.csv)
sardines <- read.csv(sardines.csv)
sardines <- read.csv(sardines.csv)
sardines <- read.csv(file="../Resources/sardines.csv")
sardines <- read.csv(file="../Classwork/UCF-VIRT-DATA-PT-10-2021-U-B/03-Stu_Sardines/Resources/sardines.csv")
setwd("~/Desktop/Classwork/MechaCar_Statistical_Analysis")
library(dplyr)
library(car)
library(ggplot2)
MechCar_mpg <- read.csv("MechaCar_mpg.csv")
model <- (lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data= MechCar_mpg)) # Generate multiple linear regressions for mpg
summary(model)
avPlots(model)
Suspension_coil <- read.csv("../MechaCar_Statistical_Analysis/Suspension_Coil.csv")
total_summary <- summarize(Suspension_coil, Mean=mean(PSI),Median=median(PSI),Variance=var(PSI), SD=sd(PSI)) # Create a dataframe containing the summary statistics of the suspension coils
lot_summary <- Suspension_coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI), SD=sd(PSI), .groups = 'keep') ## Create a dataframe containing the summary statistics of the suspension coils by lot
View(lot_summary)
